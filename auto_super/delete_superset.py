import requests
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8088"
USERNAME = "admin"
PASSWORD = "admin"

# –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
session = requests.Session()


def login():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Superset"""
    print("üîê –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ Superset...")
    url = f"{BASE_URL}/api/v1/security/login"
    payload = {"username": USERNAME, "password": PASSWORD, "provider": "db"}
    response = session.post(url, json=payload)
    if response.status_code != 200:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
    token = response.json()["access_token"]
    session.headers.update(
        {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json",
        }
    )
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")


def get_all_dashboards():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞—à–±–æ—Ä–¥—ã"""
    print("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤...")
    url = f"{BASE_URL}/api/v1/dashboard/"
    response = session.get(url)
    if response.status_code != 200:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—à–±–æ—Ä–¥–æ–≤: {response.text}")

    dashboards = response.json().get("result", [])
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–∞—à–±–æ—Ä–¥–æ–≤: {len(dashboards)}")
    return dashboards


def get_all_charts():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏"""
    print("üìä –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
    url = f"{BASE_URL}/api/v1/chart/"
    response = session.get(url)
    if response.status_code != 200:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {response.text}")

    charts = response.json().get("result", [])
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {len(charts)}")
    return charts


def get_all_datasets():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞—Ç–∞—Å–µ—Ç—ã (–≤–∫–ª—é—á–∞—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ)"""
    print("üóÉÔ∏è –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤...")
    url = f"{BASE_URL}/api/v1/dataset/"
    response = session.get(url)
    if response.status_code != 200:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤: {response.text}")

    datasets = response.json().get("result", [])
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤: {len(datasets)}")
    return datasets


def get_all_virtual_datasets():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã"""
    print("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤...")
    url = f"{BASE_URL}/api/v1/dataset/"
    response = session.get(url)
    if response.status_code != 200:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤: {response.text}")

    all_datasets = response.json().get("result", [])
    virtual_datasets = [
        ds for ds in all_datasets if ds.get("kind") == "virtual"
    ]
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤: {len(virtual_datasets)}")
    return virtual_datasets


def delete_dashboard(dashboard_id, dashboard_name):
    """–£–¥–∞–ª–∏—Ç—å –¥–∞—à–±–æ—Ä–¥"""
    url = f"{BASE_URL}/api/v1/dashboard/{dashboard_id}"
    response = session.delete(url)
    if response.status_code == 200:
        print(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω –¥–∞—à–±–æ—Ä–¥: {dashboard_name} (ID: {dashboard_id})")
        return True
    else:
        print(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∞—à–±–æ—Ä–¥ {dashboard_name}: {response.text}"
        )
        return False


def delete_chart(chart_id, chart_name):
    """–£–¥–∞–ª–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫"""
    url = f"{BASE_URL}/api/v1/chart/{chart_id}"
    response = session.delete(url)
    if response.status_code == 200:
        print(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω –≥—Ä–∞—Ñ–∏–∫: {chart_name} (ID: {chart_id})")
        return True
    else:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ {chart_name}: {response.text}")
        return False


def delete_dataset(dataset_id, dataset_name, is_virtual=False):
    """–£–¥–∞–ª–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç"""
    url = f"{BASE_URL}/api/v1/dataset/{dataset_id}"
    response = session.delete(url)
    if response.status_code == 200:
        type_str = "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç" if is_virtual else "–¥–∞—Ç–∞—Å–µ—Ç"
        print(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω {type_str}: {dataset_name} (ID: {dataset_id})")
        return True
    else:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç {dataset_name}: {response.text}")
        return False


def cleanup_superset():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏"""
    try:
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        login()

        # –£–¥–∞–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥—ã
        dashboards = get_all_dashboards()
        dashboard_count = 0
        for dashboard in dashboards:
            if dashboard.get("id") and dashboard.get("dashboard_title"):
                if delete_dashboard(
                    dashboard["id"], dashboard["dashboard_title"]
                ):
                    dashboard_count += 1
                time.sleep(0.1)

        # –£–¥–∞–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        charts = get_all_charts()
        chart_count = 0
        for chart in charts:
            if chart.get("id") and chart.get("slice_name"):
                if delete_chart(chart["id"], chart["slice_name"]):
                    chart_count += 1
                time.sleep(0.1)

        # –£–¥–∞–ª—è–µ–º –í–°–ï –¥–∞—Ç–∞—Å–µ—Ç—ã (–æ–±—ã—á–Ω—ã–µ –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ)
        datasets = get_all_datasets()
        dataset_count = 0
        virtual_count = 0

        for dataset in datasets:
            if dataset.get("id") and dataset.get("table_name"):
                is_virtual = dataset.get("kind") == "virtual"
                if delete_dataset(
                    dataset["id"], dataset["table_name"], is_virtual
                ):
                    dataset_count += 1
                    if is_virtual:
                        virtual_count += 1
                time.sleep(0.1)

        print("\n" + "=" * 50)
        print("üéØ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –¥–∞—à–±–æ—Ä–¥–æ–≤: {dashboard_count}")
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {chart_count}")
        print(
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤: {dataset_count} (–∏–∑ –Ω–∏—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö: {virtual_count})"
        )
        print("=" * 50)

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


def confirm_deletion():
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç –í–°–ï –æ–±—ä–µ–∫—Ç—ã –≤ Superset!")
    print("‚ö†Ô∏è  –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:")
    print("     - –í—Å–µ –¥–∞—à–±–æ—Ä–¥—ã")
    print("     - –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ (charts)")
    print("     - –í—Å–µ –¥–∞—Ç–∞—Å–µ—Ç—ã (–æ–±—ã—á–Ω—ã–µ –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ)")
    print("‚ö†Ô∏è  –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!")

    confirmation = input("–í–≤–µ–¥–∏—Ç–µ 'DELETE_ALL' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
    if confirmation == "DELETE_ALL":
        return True
    else:
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False


# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("üßπ Superset Cleanup Tool")
    print("=" * 40)
    print("–£–¥–∞–ª—è–µ—Ç –í–°–ï –¥–∞—à–±–æ—Ä–¥—ã, –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∞—Ç–∞—Å–µ—Ç—ã")
    print("=" * 40)

    if confirm_deletion():
        cleanup_superset()
    else:
        print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
