import requests
import json
import time

# ========================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ========================
BASE_URL = "http://localhost:8088"
USERNAME = "admin"
PASSWORD = "admin"

# –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
session = requests.Session()


# ========================
# 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
# ========================
def login():
    print("üîê –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ Superset...")
    url = f"{BASE_URL}/api/v1/security/login"
    payload = {"username": USERNAME, "password": PASSWORD, "provider": "db"}
    response = session.post(url, json=payload)
    if response.status_code != 200:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
    token = response.json()["access_token"]
    session.headers.update({"Authorization": f"Bearer {token}"})
    session.headers.update({"Content-Type": "application/json"})
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")


# –í—ã–∑–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
login()


# ========================
# 2. –ü–æ–ª—É—á–∏—Ç—å ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# ========================
def get_database_id():
    print("üîç –ü–æ–ª—É—á–∞–µ–º ID –ë–î...")
    url = f"{BASE_URL}/api/v1/database/"
    response = session.get(url)
    if response.status_code != 200:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
    data = response.json()
    databases = data["result"]
    if not databases:
        raise Exception("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
    for db in databases:
        print(f"  ‚Ä¢ ID: {db['id']}, Name: {db['database_name']}")
    return databases[0]["id"]


# ========================
# 3. –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –∏–∑ SQL
# ========================
def create_virtual_dataset(database_id, dataset_name, sql_query):
    print(f"üìä –°–æ–∑–¥–∞—ë–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç: {dataset_name}")
    url = f"{BASE_URL}/api/v1/dataset/"
    payload = {
        "database": database_id,
        "schema": None,  # –ú–æ–∂–Ω–æ None, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ
        "table_name": dataset_name,
        "sql": sql_query.strip(),
        "owners": [1],
        # –£–î–ê–õ–ò–õ–ò: "is_sqllab_view": True
    }
    response = session.post(url, json=payload)
    if response.status_code != 201:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        simple_payload = {
            "database": database_id,
            "table_name": dataset_name,
            "sql": "SELECT 1 AS test",
        }
        response = session.post(url, json=simple_payload)
        if response.status_code != 201:
            raise Exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞: {response.text}")
        else:
            print(
                f"‚ö†Ô∏è –î–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ SQL –∑–∞–º–µ–Ω—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ (–ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–∞–≤—ã—á–∫–∞–º–∏ –∏–ª–∏ —Å–∏–º–≤–æ–ª–∞–º–∏)"
            )
    else:
        print(f"‚úÖ –î–∞—Ç–∞—Å–µ—Ç '{dataset_name}' —Å–æ–∑–¥–∞–Ω")
    return response.json()["id"]


# ========================
# –ú–∞—Å—Å–∏–≤ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
# ========================
DATASETS = [
    {
        "name": "Sales Overview",
        "description": "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "sql": """
SELECT
    COUNT(*) AS "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤",
    SUM(total) AS "–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞",
    AVG(total) AS "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫",
    MIN(invoice_date) AS "–ü–µ—Ä–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞",
    MAX(invoice_date) AS "–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–¥–∞–∂–∞"
FROM
    invoice;
        """,
    },
    {
        "name": "Revenue by Country",
        "description": "–í—ã—Ä—É—á–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º",
        "sql": """
SELECT
    billing_country AS "–°—Ç—Ä–∞–Ω–∞",
    COUNT(invoice_id) AS "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤",
    SUM(total) AS "–í—ã—Ä—É—á–∫–∞",
    AVG(total) AS "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫"
FROM
    invoice
GROUP BY
    billing_country
ORDER BY
    "–í—ã—Ä—É—á–∫–∞" DESC;
        """,
    },
    {
        "name": "Top 10 Customers",
        "description": "–¢–æ–ø-10 –∫–ª–∏–µ–Ω—Ç–æ–≤",
        "sql": """
SELECT
    c.first_name || ' ' || c.last_name AS "–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞",
    c.country AS "–°—Ç—Ä–∞–Ω–∞",
    c.email AS "Email",
    c.company AS "–ö–æ–º–ø–∞–Ω–∏—è",
    SUM(i.total) AS "–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞",
    COUNT(i.invoice_id) AS "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤"
FROM
    customer c
    JOIN invoice i ON c.customer_id = i.customer_id
GROUP BY
    c.customer_id,
    c.first_name,
    c.last_name,
    c.country,
    c.email,
    c.company
ORDER BY
    "–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞" DESC LIMIT 10;
        """,
    },
    {
        "name": "Customers by City",
        "description": "–ö–ª–∏–µ–Ω—Ç—ã –ø–æ –≥–æ—Ä–æ–¥–∞–º",
        "sql": """
SELECT
    c.city AS "–ì–æ—Ä–æ–¥",
    c.country AS "–°—Ç—Ä–∞–Ω–∞",
    COUNT(c.customer_id) AS "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤",
    SUM(i.total) AS "–í—ã—Ä—É—á–∫–∞"
FROM
    customer c
    JOIN invoice i ON c.customer_id = i.customer_id
GROUP BY
    c.city,
    c.country
ORDER BY
    "–í—ã—Ä—É—á–∫–∞" DESC;
        """,
    },
    {
        "name": "Top 10 Artists",
        "description": "–¢–æ–ø-10 –∞—Ä—Ç–∏—Å—Ç–æ–≤",
        "sql": """
SELECT
    ar.name AS "–ê—Ä—Ç–∏—Å—Ç",
    COUNT(il.track_id) AS "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂",
    SUM(il.unit_price) AS "–í—ã—Ä—É—á–∫–∞"
FROM
    artist ar
    JOIN album al ON ar.artist_id = al.artist_id
    JOIN track t ON al.album_id = t.album_id
    JOIN invoice_line il ON t.track_id = il.track_id
GROUP BY
    ar.artist_id,
    ar.name
ORDER BY
    "–í—ã—Ä—É—á–∫–∞" DESC LIMIT 10;
        """,
    },
    {
        "name": "Monthly Revenue",
        "description": "–í—ã—Ä—É—á–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º",
        "sql": """
SELECT 
    DATE_TRUNC('month', invoice_date)::date AS "–ú–µ—Å—è—Ü",
    SUM(total) AS "–í—ã—Ä—É—á–∫–∞"
FROM invoice
GROUP BY "–ú–µ—Å—è—Ü"
ORDER BY "–ú–µ—Å—è—Ü";
        """,
    },
    {
        "name": "Top 10 Genres",
        "description": "–¢–æ–ø-10 –∂–∞–Ω—Ä–æ–≤",
        "sql": """
SELECT
    g.name AS "–ñ–∞–Ω—Ä",
    COUNT(il.track_id) AS "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂",
    SUM(il.unit_price) AS "–í—ã—Ä—É—á–∫–∞"
FROM
    genre g
    JOIN track t ON g.genre_id = t.genre_id
    JOIN invoice_line il ON t.track_id = il.track_id
GROUP BY
    g.genre_id,
    g.name
ORDER BY
    "–í—ã—Ä—É—á–∫–∞" DESC LIMIT 10;
        """,
    },
    {
        "name": "Top 10 Tracks",
        "description": "–¢–æ–ø-10 —Ç—Ä–µ–∫–æ–≤",
        "sql": """
SELECT
    t.name AS "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞",
    ar.name AS "–ê—Ä—Ç–∏—Å—Ç",
    g.name AS "–ñ–∞–Ω—Ä",
    ROUND(t.milliseconds / 60000.0, 2) AS "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)",
    il.unit_price AS "–¶–µ–Ω–∞",
    COUNT(il.track_id) AS "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂"
FROM
    track t
    JOIN invoice_line il ON t.track_id = il.track_id
    JOIN album al ON t.album_id = al.album_id
    JOIN artist ar ON al.artist_id = ar.artist_id
    JOIN genre g ON t.genre_id = g.genre_id
GROUP BY
    t.track_id,
    t.name,
    ar.name,
    g.name,
    t.milliseconds,
    il.unit_price
ORDER BY
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂" DESC LIMIT 10;
        """,
    },
    {
        "name": "Media Type Performance",
        "description": "–í—ã—Ä—É—á–∫–∞ –ø–æ —Ç–∏–ø–∞–º –Ω–æ—Å–∏—Ç–µ–ª–µ–π",
        "sql": """
SELECT
    mt.name AS "–¢–∏–ø –Ω–æ—Å–∏—Ç–µ–ª—è",
    COUNT(il.track_id) AS "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂",
    SUM(il.unit_price) AS "–í—ã—Ä—É—á–∫–∞"
FROM
    media_type mt
    JOIN track t ON mt.media_type_id = t.media_type_id
    JOIN invoice_line il ON t.track_id = il.track_id
GROUP BY
    mt.media_type_id,
    mt.name
ORDER BY
    "–í—ã—Ä—É—á–∫–∞" DESC;
        """,
    },
    {
        "name": "Support Rep Performance",
        "description": "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤",
        "sql": """
SELECT
    e.first_name || ' ' || e.last_name AS "–ú–µ–Ω–µ–¥–∂–µ—Ä",
    e.email AS "Email",
    COUNT(c.customer_id) AS "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤",
    SUM(i.total) AS "–í—ã—Ä—É—á–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤"
FROM
    employee e
    JOIN customer c ON e.employee_id = c.support_rep_id
    JOIN invoice i ON c.customer_id = i.customer_id
GROUP BY
    e.employee_id,
    e.first_name,
    e.last_name,
    e.email
ORDER BY
    "–í—ã—Ä—É—á–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤" DESC;
        """,
    },
    {
        "name": "New Customers by Month",
        "description": "–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –ø–æ –º–µ—Å—è—Ü–∞–º",
        "sql": """
SELECT 
    DATE_TRUNC('month', i.invoice_date)::date AS "–ú–µ—Å—è—Ü",
    COUNT(DISTINCT c.customer_id) AS "–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"
FROM customer c
JOIN invoice i ON c.customer_id = i.customer_id
WHERE i.invoice_date = (
    SELECT MIN(invoice_date)
    FROM invoice i2
    WHERE i2.customer_id = c.customer_id
)
GROUP BY "–ú–µ—Å—è—Ü"
ORDER BY "–ú–µ—Å—è—Ü";
        """,
    },
]


# ========================
# 4. –ó–∞–ø—É—Å–∫: —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
# ========================
if __name__ == "__main__":
    try:
        db_id = get_database_id()
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º database_id = {db_id}")

        created_datasets = []

        for ds in DATASETS:
            try:
                dataset_id = create_virtual_dataset(
                    db_id, ds["name"], ds["sql"]
                )
                created_datasets.append(
                    {
                        "name": ds["name"],
                        "id": dataset_id,
                        "description": ds["description"],
                    }
                )
                time.sleep(1)
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å '{ds['name']}': {e}")

        # –ò—Ç–æ–≥
        print(
            f"\nüéâ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–û {len(created_datasets)} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤:"
        )
        for ds in created_datasets:
            print(f"  ‚Ä¢ {ds['name']} (ID: {ds['id']}) ‚Äî {ds['description']}")

        print(f"\nüëâ –ü–µ—Ä–µ–π–¥–∏ –≤ Superset: {BASE_URL}/dataset/list/")
        print("   –∏ –Ω–∞—á–Ω–∏ —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏!")

    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
