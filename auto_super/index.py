import requests
import json
import time
import uuid

# ========================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ========================
BASE_URL = "http://localhost:8088"
USERNAME = "admin"
PASSWORD = "admin"

# –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
session = requests.Session()


# ========================
# 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
# ========================
def login():
    print("üîê –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ Superset...")
    url = f"{BASE_URL}/api/v1/security/login"
    payload = {"username": USERNAME, "password": PASSWORD, "provider": "db"}
    response = session.post(url, json=payload)
    if response.status_code != 200:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
    token = response.json()["access_token"]
    session.headers.update({"Authorization": f"Bearer {token}"})
    session.headers.update({"Content-Type": "application/json"})
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")


# –í—ã–∑–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
login()


# ========================
# 2. –ü–æ–ª—É—á–∏—Ç—å ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# ========================
def get_database_id():
    print("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")
    url = f"{BASE_URL}/api/v1/database/"
    response = session.get(url)
    if response.status_code != 200:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
    data = response.json()
    databases = data["result"]
    if not databases:
        raise Exception("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
    for db in databases:
        print(f"  ‚Ä¢ ID: {db['id']}, Name: {db['database_name']}")
    return databases[0]["id"]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π


# ========================
# 3. –°–æ–∑–¥–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç
# ========================
def create_dataset(database_id):
    print("üìä –°–æ–∑–¥–∞—ë–º –¥–∞—Ç–∞—Å–µ—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã customer...")
    url = f"{BASE_URL}/api/v1/dataset/"
    payload = {
        "database": database_id,
        "schema": "public",
        "table_name": "customer",
        "owners": [1],
    }
    response = session.post(url, json=payload)
    if response.status_code != 201:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞: {response.text}")
    dataset_id = response.json()["id"]
    print(f"‚úÖ –î–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω: ID = {dataset_id}")
    return dataset_id


# ========================
# 4. –°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ Big Number (–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
# ========================
def create_big_number_chart(dataset_id):
    print("üìà –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫ Big Number (Total Customers)...")
    url = f"{BASE_URL}/api/v1/chart/"
    form_data = {
        "datasource": f"{dataset_id}__table",
        "viz_type": "big_number_total",
        "metric": {
            "expressionType": "SIMPLE",
            "column": {"column_name": "count", "type": "BIGINT"},
            "aggregate": "sum",
            "label": "Total Customers",
        },
        "adhoc_filters": [],
        "row_limit": 1000,
    }
    payload = {
        "slice_name": "Total Customers",
        "viz_type": "big_number_total",
        "datasource_type": "table",
        "datasource_id": dataset_id,
        "params": json.dumps(form_data),
        "owners": [1],
    }
    response = session.post(url, json=payload)
    if response.status_code != 201:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {response.text}")
    chart_id = response.json()["id"]
    print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ Big Number —Å–æ–∑–¥–∞–Ω: ID = {chart_id}")
    return chart_id


# ========================
# 5. –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É (–∫–ª–∏–µ–Ω—Ç—ã –ø–æ —Å—Ç—Ä–∞–Ω–∞–º)
# ========================
def create_table_chart(dataset_id):
    print("üìä –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É 'Customers by Country'...")
    url = f"{BASE_URL}/api/v1/chart/"
    form_data = {
        "datasource": f"{dataset_id}__table",
        "viz_type": "table",
        "metrics": ["count"],
        "groupby": ["country"],
        "adhoc_filters": [],
        "row_limit": 1000,
        "table_timestamp_format": "smart_date",
        "include_time": False,
    }
    payload = {
        "slice_name": "Customers by Country",
        "viz_type": "table",
        "datasource_type": "table",
        "datasource_id": dataset_id,
        "params": json.dumps(form_data),
        "owners": [1],
    }
    response = session.post(url, json=payload)
    if response.status_code != 201:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {response.text}")
    chart_id = response.json()["id"]
    print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: ID = {chart_id}")
    return chart_id


# ========================
# 6. –°–æ–∑–¥–∞—Ç—å –¥–∞—à–±–æ—Ä–¥
# ========================
def create_dashboard():
    print("üñº –°–æ–∑–¥–∞—ë–º –¥–∞—à–±–æ—Ä–¥...")
    import random

    slug = f"chinook-auto-{int(time.time())}-{random.randint(1000, 9999)}"
    url = f"{BASE_URL}/api/v1/dashboard/"
    payload = {
        "dashboard_title": "Chinook Auto Dashboard",
        "slug": slug,
        "published": True,
        "owners": [1],
    }
    response = session.post(url, json=payload)
    if response.status_code != 201:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {response.text}")
    dashboard_id = response.json()["id"]
    print(f"‚úÖ –î–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω: ID = {dashboard_id}, slug = {slug}")
    return dashboard_id, slug


# ========================
# 7. –î–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –¥–∞—à–±–æ—Ä–¥ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π position_json)
# ========================
def add_chart_to_dashboard(chart_id, dashboard_id):
    print("üîó –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –¥–∞—à–±–æ—Ä–¥...")
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—á–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    position_json = {
        "DASHBOARD_VERSION_KEY": "v2",
        "ROOT_ID": {"type": "ROOT", "id": "ROOT_ID", "children": ["GRID_ID"]},
        "GRID_ID": {"type": "GRID", "id": "GRID_ID", "children": ["ROW-1"]},
        "ROW-1": {
            "type": "ROW",
            "id": "ROW-1",
            "children": [f"CHART-{chart_id}"],
            "height": 50,
        },
        f"CHART-{chart_id}": {
            "type": "CHART",
            "id": f"CHART-{chart_id}",
            "meta": {
                "chartId": chart_id,
                "width": 12,
                "height": 50,
                "uuid": str(uuid.uuid4()),
                "sliceName": f"Chart {chart_id}",
            },
        },
    }

    update_url = f"{BASE_URL}/api/v1/dashboard/{dashboard_id}"
    update_payload = {"position_json": json.dumps(position_json)}

    response = session.put(update_url, json=update_payload)
    if response.status_code != 200:
        raise Exception(
            f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {response.status_code} - {response.text}"
        )

    print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –¥–∞—à–±–æ—Ä–¥ {dashboard_id}")


# ========================
# 8. –ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
# ========================
if __name__ == "__main__":
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º ID –ë–î
        db_id = get_database_id()
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º database_id = {db_id}")

        # 2. –°–æ–∑–¥–∞—ë–º –¥–∞—Ç–∞—Å–µ—Ç
        dataset_id = create_dataset(db_id)
        time.sleep(2)

        # 3. –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫–∏
        big_number_chart_id = create_big_number_chart(dataset_id)
        time.sleep(2)
        table_chart_id = create_table_chart(dataset_id)
        time.sleep(2)

        # 4. –°–æ–∑–¥–∞—ë–º –¥–∞—à–±–æ—Ä–¥
        dashboard_id, slug = create_dashboard()
        time.sleep(2)

        # 5. –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        add_chart_to_dashboard(big_number_chart_id, dashboard_id)
        # time.sleep(2)
        # add_chart_to_dashboard(table_chart_id, dashboard_id)

        # 6. –ì–æ—Ç–æ–≤–æ!
        print(f"\nüéâ –£–°–ü–ï–•! –î–∞—à–±–æ—Ä–¥ –≥–æ—Ç–æ–≤:")
        print(f"üîó {BASE_URL}/superset/dashboard/{slug}/")
        print(f"üìä –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {BASE_URL}/dashboard/{dashboard_id}/view")

    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
