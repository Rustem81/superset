import requests
import json
import time
import uuid

# ========================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ========================
BASE_URL = "http://localhost:8088"
USERNAME = "admin"
PASSWORD = "admin"

# –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
session = requests.Session()


# ========================
# 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
# ========================
def login():
    print("üîê –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ Superset...")
    url = f"{BASE_URL}/api/v1/security/login"
    payload = {"username": USERNAME, "password": PASSWORD, "provider": "db"}
    response = session.post(url, json=payload)
    if response.status_code != 200:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
    token = response.json()["access_token"]
    session.headers.update(
        {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json",
        }
    )
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")


login()


# ========================
# 2. –ü–æ–ª—É—á–∏—Ç—å ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# ========================
def get_database_id():
    print("üîç –ü–æ–ª—É—á–∞–µ–º ID –ë–î...")
    url = f"{BASE_URL}/api/v1/database/"
    response = session.get(url)
    if response.status_code != 200:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
    data = response.json()
    databases = data["result"]
    if not databases:
        raise Exception("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
    for db in databases:
        print(f"  ‚Ä¢ ID: {db['id']}, Name: {db['database_name']}")
    return databases[0]["id"]


# ========================
# 3. –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
# ========================
def create_virtual_dataset(database_id, dataset_name, sql_query):
    print(f"üìä –°–æ–∑–¥–∞—ë–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç: {dataset_name}")

    url = f"{BASE_URL}/api/v1/dataset/"
    payload = {
        "database": database_id,
        "schema": None,
        "table_name": dataset_name,
        "sql": sql_query.strip(),
        "owners": [1],
    }

    response = session.post(url, json=payload)
    if response.status_code != 201:
        error_msg = response.text
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞ '{dataset_name}': {error_msg}")
        return None

    dataset_id = response.json()["id"]
    print(f"‚úÖ –î–∞—Ç–∞—Å–µ—Ç '{dataset_name}' —Å–æ–∑–¥–∞–Ω (ID: {dataset_id})")
    return dataset_id


# ========================
# 4. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ viz_types
# ========================
def get_available_viz_types():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π"""
    print("üîç –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")
    url = f"{BASE_URL}/api/v1/chart/_info"
    response = session.get(url)
    if response.status_code == 200:
        data = response.json()
        # –ò—â–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
        if (
            "form_data_schema" in data
            and "definitions" in data["form_data_schema"]
        ):
            definitions = data["form_data_schema"]["definitions"]
            # viz_types –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ VizType
            if "VizType" in definitions:
                viz_types = definitions["VizType"]["enum"]
                print("‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π:")
                for viz_type in viz_types:
                    print(f"   - {viz_type}")
                return viz_types
            else:
                print("‚ö†Ô∏è 'VizType' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ definitions")
        else:
            print(
                "‚ö†Ô∏è 'form_data_schema' –∏–ª–∏ 'definitions' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ"
            )
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
    return []


# ========================
# 5. –°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫
# ========================
def create_chart(dataset_id, chart_name, viz_type, form_data):
    print(f"üìà –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫: {chart_name} ({viz_type})")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    form_data["datasource"] = f"{dataset_id}__table"
    form_data["viz_type"] = viz_type
    form_data["row_limit"] = 1000

    url = f"{BASE_URL}/api/v1/chart/"
    payload = {
        "slice_name": chart_name,
        "viz_type": viz_type,
        "datasource_type": "table",
        "datasource_id": dataset_id,
        "params": json.dumps(form_data),
        "owners": [1],
    }

    response = session.post(url, json=payload)
    if response.status_code != 201:
        error_msg = response.text
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ '{chart_name}': {error_msg}")
        return None

    chart_id = response.json()["id"]
    print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ '{chart_name}' —Å–æ–∑–¥–∞–Ω (ID: {chart_id})")
    return chart_id


# ========================
# 6. –°–æ–∑–¥–∞—Ç—å –¥–∞—à–±–æ—Ä–¥
# ========================
def create_dashboard():
    print("üñº –°–æ–∑–¥–∞—ë–º –¥–∞—à–±–æ—Ä–¥...")
    import random

    slug = f"chinook-full-{int(time.time())}-{random.randint(1000, 9999)}"
    url = f"{BASE_URL}/api/v1/dashboard/"
    payload = {
        "dashboard_title": "Chinook Full Analytics",
        "slug": slug,
        "published": True,
        "owners": [1],
    }
    response = session.post(url, json=payload)
    if response.status_code != 201:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {response.text}")
    dashboard_id = response.json()["id"]
    print(f"‚úÖ –î–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω: ID = {dashboard_id}, slug = {slug}")
    return dashboard_id, slug


# ========================
# 7. –î–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –¥–∞—à–±–æ—Ä–¥
# ========================
def add_chart_to_dashboard(chart_id, dashboard_id):
    print(f"üîó –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ ID={chart_id} –Ω–∞ –¥–∞—à–±–æ—Ä–¥ {dashboard_id}")

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–∞—à–±–æ—Ä–¥–∞
    url = f"{BASE_URL}/api/v1/dashboard/{dashboard_id}"
    response = session.get(url)

    if response.status_code != 200:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞—à–±–æ—Ä–¥: {response.text}")
        return False

    try:
        dashboard_data = response.json()
        result_data = dashboard_data.get("result", {})

        position_json = result_data.get("position_json", {})

        if isinstance(position_json, str):
            try:
                position_json = json.loads(position_json)
            except json.JSONDecodeError:
                position_json = {}

        if not position_json:
            position_json = {
                "DASHBOARD_VERSION_KEY": "v2",
                "ROOT_ID": {
                    "type": "ROOT",
                    "id": "ROOT_ID",
                    "children": ["GRID_ID"],
                },
                "GRID_ID": {
                    "type": "GRID",
                    "id": "GRID_ID",
                    "children": ["ROW-1"],
                },
                "ROW-1": {"type": "ROW", "id": "ROW-1", "children": []},
            }

        chart_key = f"CHART-{chart_id}-{uuid.uuid4().hex[:8]}"

        position_json[chart_key] = {
            "type": "CHART",
            "id": chart_key,
            "meta": {
                "chartId": chart_id,
                "width": 6,
                "height": 50,
                "uuid": str(uuid.uuid4()),
            },
        }

        if "ROW-1" in position_json:
            if "children" not in position_json["ROW-1"]:
                position_json["ROW-1"]["children"] = []
            position_json["ROW-1"]["children"].append(chart_key)

        update_payload = {"position_json": json.dumps(position_json)}
        response = session.put(url, json=update_payload)

        if response.status_code == 200:
            print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ {chart_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –¥–∞—à–±–æ—Ä–¥")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {response.text}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return False


# ========================
# 8. –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –î–ê–¢–ê–°–ï–¢–´ –ò –ì–†–ê–§–ò–ö–ò (–ü–†–ê–í–ò–õ–¨–ù–´–ï VIZ_TYPES)
# ========================
DATASETS = [
    {
        "name": "Customers by City",
        "sql": """
SELECT
c.city,
c.country,
COUNT(c.customer_id) AS customer_count,
SUM(i.total) AS revenue
FROM customer c
JOIN invoice i ON c.customer_id = i.customer_id
GROUP BY c.city, c.country
ORDER BY revenue DESC;
""",
        "charts": [
            {
                "name": "Customers by City (Table)",
                "viz_type": "table",
                "form_data": {
                    "all_columns": [
                        "city",
                        "country",
                        "customer_count",
                        "revenue",
                    ],
                    "page_length": 20,
                },
            }
        ],
    },
    {
        "name": "Top 10 Tracks",
        "sql": """
SELECT
t.name AS track_name,
ar.name AS artist,
g.name AS genre,
ROUND(t.milliseconds / 60000.0, 2) AS duration_min,
il.unit_price AS price,
COUNT(il.track_id) AS sales_count
FROM track t
JOIN invoice_line il ON t.track_id = il.track_id
JOIN album al ON t.album_id = al.album_id
JOIN artist ar ON al.artist_id = ar.artist_id
JOIN genre g ON t.genre_id = g.genre_id
GROUP BY t.track_id, t.name, ar.name, g.name, t.milliseconds, il.unit_price
ORDER BY sales_count DESC
LIMIT 10;
""",
        "charts": [
            {
                "name": "Top 10 Tracks (Table)",
                "viz_type": "table",
                "form_data": {
                    "all_columns": [
                        "track_name",
                        "artist",
                        "genre",
                        "duration_min",
                        "price",
                        "sales_count",
                    ],
                    "page_length": 10,
                },
            }
        ],
    },
]

# ========================
# 9. –ó–∞–ø—É—Å–∫
# ========================
if __name__ == "__main__":
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞...")

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
        available_viz_types = get_available_viz_types()

        db_id = get_database_id()
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º database_id: {db_id}")

        dashboard_id, slug = create_dashboard()
        chart_ids = []
        successful_charts = 0

        for i, ds in enumerate(DATASETS):
            try:
                print(f"\n{'=' * 50}")
                print(
                    f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç {i + 1}/{len(DATASETS)}: {ds['name']}"
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ viz_type
                for chart in ds["charts"]:
                    if chart["viz_type"] not in available_viz_types:
                        print(
                            f"‚ö†Ô∏è  viz_type '{chart['viz_type']}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è! –î–æ—Å—Ç—É–ø–Ω—ã–µ: {available_viz_types}"
                        )
                        # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                        if chart["viz_type"] == "pie":
                            chart["viz_type"] = "pie_chart"
                        elif chart["viz_type"] == "line":
                            chart["viz_type"] = "time_series"
                        elif chart["viz_type"] == "bar":
                            chart["viz_type"] = "dist_bar"

                dataset_id = create_virtual_dataset(
                    db_id, ds["name"], ds["sql"]
                )
                if not dataset_id:
                    continue

                time.sleep(2)

                for j, chart in enumerate(ds["charts"]):
                    try:
                        print(
                            f"  –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ {j + 1}: {chart['name']} ({chart['viz_type']})"
                        )

                        chart_id = create_chart(
                            dataset_id,
                            chart["name"],
                            chart["viz_type"],
                            chart["form_data"],
                        )
                        if chart_id:
                            chart_ids.append(chart_id)
                            time.sleep(2)

                            if add_chart_to_dashboard(chart_id, dashboard_id):
                                successful_charts += 1
                            time.sleep(1)

                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
                        continue

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ '{ds['name']}': {e}")
                continue

        print(f"\n{'=' * 50}")
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {successful_charts}/{len(chart_ids)}"
        )
        print(f"üîó –î–∞—à–±–æ—Ä–¥: {BASE_URL}/superset/dashboard/{slug}/")

        if successful_charts > 0:
            print("üéâ –î–∞—à–±–æ—Ä–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            print("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—à–±–æ—Ä–¥ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Superset")
        else:
            print("\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞!")

    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback

        traceback.print_exc()
