# import_superset_artifacts.py
import requests
import yaml
import os
import time
import io
import zipfile
from typing import Dict, Any

# ========================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ========================
BASE_URL = "http://localhost:8088"
USERNAME = "admin"
PASSWORD = "admin"
YAML_FILE = "superset_artifacts.yaml"

# –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
session = requests.Session()


# ========================
# 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
# ========================
def login():
    print("üîê –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ Superset...")
    url = f"{BASE_URL}/api/v1/security/login"
    payload = {"username": USERNAME, "password": PASSWORD, "provider": "db"}
    response = session.post(url, json=payload)
    if response.status_code != 200:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
    token = response.json()["access_token"]
    session.headers.update({"Authorization": f"Bearer {token}"})
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")


# ========================
# 2. –°–æ–∑–¥–∞—Ç—å ZIP –≤ –ø–∞–º—è—Ç–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
# ========================
def create_zip_from_dict(data: Dict[str, Any], filename: str) -> bytes:
    buffer = io.BytesIO()
    with zipfile.ZipFile(buffer, "w", zipfile.ZIP_DEFLATED) as zf:
        zf.writestr(
            filename,
            yaml.dump(data, allow_unicode=True, sort_keys=False, indent=2),
        )
    buffer.seek(0)
    return buffer.read()


# ========================
# 3. –ò–º–ø–æ—Ä—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
# ========================
def import_database(database_data):
    print("üóÑÔ∏è –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
    url = f"{BASE_URL}/api/v1/database/import/"

    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä—É—é –æ–∂–∏–¥–∞–µ—Ç Superset
    zip_data = {
        "version": "1.0.0",
        "type": "Database",
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
        "databases": {
            "__root__": database_data  # üî• –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å __root__
        },
    }

    # –°–æ–∑–¥–∞—ë–º ZIP –≤ –ø–∞–º—è—Ç–∏
    buffer = io.BytesIO()
    with zipfile.ZipFile(buffer, "w", zipfile.ZIP_DEFLATED) as zf:
        zf.writestr(
            "metadata.yaml",
            yaml.dump(
                {
                    "version": "1.0.0",
                    "type": "Database",
                    "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
                },
                allow_unicode=True,
            ),
        )
        zf.writestr(
            "databases/__root__.yaml",
            yaml.dump(database_data, allow_unicode=True),
        )

    buffer.seek(0)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    files = {
        "file": ("database.zip", buffer.read(), "application/zip"),
        "overwrite": (None, "true"),
    }
    response = session.post(url, files=files)
    if response.status_code == 201:
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        return True
    else:
        print(
            f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ë–î: {response.status_code} ‚Äî {response.text}"
        )
        return False


# ========================
# 4. –ò–º–ø–æ—Ä—Ç –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
# ========================
def import_datasets(dataset_list: list):
    print(f"üìä –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º {len(dataset_list)} –¥–∞—Ç–∞—Å–µ—Ç–æ–≤...")
    url = f"{BASE_URL}/api/v1/dataset/import/"

    for ds in dataset_list:
        print(f"  ‚û§ –ò–º–ø–æ—Ä—Ç: {ds['table_name']} (ID={ds['id']})")

        zip_data = {
            "datasets": [ds],
            "version": "1.0.0",
            "type": "Dataset",
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
        }
        zip_content = create_zip_from_dict(zip_data, "dataset_metadata.yaml")

        files = {
            "file": ("dataset.zip", zip_content, "application/zip"),
            "overwrite": (None, "true"),
        }
        response = session.post(url, files=files)
        if response.status_code == 201:
            print(f"    ‚úÖ –î–∞—Ç–∞—Å–µ—Ç '{ds['table_name']}' –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        else:
            print(
                f"    ‚ùå –û—à–∏–±–∫–∞: {response.status_code} ‚Äî {response.text[:300]}"
            )
        time.sleep(0.5)

    print("‚úÖ –í—Å–µ –¥–∞—Ç–∞—Å–µ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")


# ========================
# 5. –ò–º–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∏–∫–æ–≤
# ========================
def import_charts(chart_list: list):
    print(f"üìà –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º {len(chart_list)} –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
    url = f"{BASE_URL}/api/v1/chart/import/"

    for ch in chart_list:
        print(f"  ‚û§ –ò–º–ø–æ—Ä—Ç: {ch['slice_name']} (ID={ch['id']})")

        zip_data = {
            "charts": {str(ch["id"]): ch},
            "version": "1.0.0",
            "type": "Chart",
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
        }
        zip_content = create_zip_from_dict(zip_data, "chart_metadata.yaml")

        files = {
            "file": ("chart.zip", zip_content, "application/zip"),
            "overwrite": (None, "true"),
        }
        response = session.post(url, files=files)
        if response.status_code == 201:
            print(f"    ‚úÖ –ì—Ä–∞—Ñ–∏–∫ '{ch['slice_name']}' –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        else:
            print(
                f"    ‚ùå –û—à–∏–±–∫–∞: {response.status_code} ‚Äî {response.text[:300]}"
            )
        time.sleep(0.5)

    print("‚úÖ –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")


# ========================
# 6. –ò–º–ø–æ—Ä—Ç –¥–∞—à–±–æ—Ä–¥–∞
# ========================
def import_dashboard(dashboard_data: Dict):
    print("üé® –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—à–±–æ—Ä–¥...")
    url = f"{BASE_URL}/api/v1/dashboard/import/"

    zip_data = {
        "dashboards": {str(dashboard_data["id"]): dashboard_data},
        "version": "1.0.0",
        "type": "Dashboard",
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
    }
    zip_content = create_zip_from_dict(zip_data, "dashboard_metadata.yaml")

    files = {
        "file": ("dashboard.zip", zip_content, "application/zip"),
        "overwrite": (None, "true"),
    }
    response = session.post(url, files=files)
    if response.status_code == 201:
        print("‚úÖ –î–∞—à–±–æ—Ä–¥ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return True
    else:
        print(
            f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞—à–±–æ—Ä–¥–∞: {response.status_code} ‚Äî {response.text[:500]}"
        )
        return False


# ========================
# 7. –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
# ========================
if __name__ == "__main__":
    try:
        login()

        if not os.path.exists(YAML_FILE):
            raise Exception(
                f"‚ùå –§–∞–π–ª {YAML_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ."
            )

        with open(YAML_FILE, "r", encoding="utf-8") as f:
            data = yaml.safe_load(f)

        print(
            f"üì¶ –ù–∞–π–¥–µ–Ω–æ –≤ YAML: "
            f"–ë–î: {'–¥–∞' if data.get('database') else '–Ω–µ—Ç'}, "
            f"–î–∞—Ç–∞—Å–µ—Ç—ã: {len(data.get('datasets', []))}, "
            f"–ì—Ä–∞—Ñ–∏–∫–∏: {len(data.get('charts', []))}, "
            f"–î–∞—à–±–æ—Ä–¥: {'–¥–∞' if data.get('dashboard') else '–Ω–µ—Ç'}"
        )

        # === 1. –ò–º–ø–æ—Ä—Ç –ë–î ===
        if "database" in data:
            import_database(data["database"])
        else:
            print(
                "‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ YAML. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –≤—Ä—É—á–Ω—É—é."
            )

        # === 2. –ò–º–ø–æ—Ä—Ç –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ ===
        if "datasets" in data:
            import_datasets(data["datasets"])

        # === 3. –ò–º–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∏–∫–æ–≤ ===
        if "charts" in data:
            import_charts(data["charts"])

        # === 4. –ò–º–ø–æ—Ä—Ç –¥–∞—à–±–æ—Ä–¥–∞ ===
        if "dashboard" in data:
            import_dashboard(data["dashboard"])

        print(f"\nüéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(
            f"üëâ –û—Ç–∫—Ä–æ–π –¥–∞—à–±–æ—Ä–¥: {BASE_URL}/superset/dashboard/{data['dashboard']['id']}/?standalone=true"
        )

    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
