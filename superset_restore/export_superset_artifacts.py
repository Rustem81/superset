# export_superset_artifacts.py
import requests
import json
import time
import yaml
import os
from typing import List

# ========================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ========================
BASE_URL = "http://localhost:8088"
USERNAME = "admin"
PASSWORD = "admin"
OUTPUT_FILE = "superset_artifacts.yaml"

# –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
session = requests.Session()


# ========================
# 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
# ========================
def login():
    print("üîê –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ Superset...")
    url = f"{BASE_URL}/api/v1/security/login"
    payload = {"username": USERNAME, "password": PASSWORD, "provider": "db"}
    try:
        response = session.post(url, json=payload)
        if response.status_code != 200:
            raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
        token = response.json()["access_token"]
        session.headers.update({"Authorization": f"Bearer {token}"})
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        raise Exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è: {e}")


# ========================
# 2. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ ID –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
# ========================
def get_all_dataset_ids() -> List[int]:
    print("üîç –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –¥–∞—Ç–∞—Å–µ—Ç–æ–≤...")
    url = f"{BASE_URL}/api/v1/dataset/"
    params = {"q": json.dumps({"columns": ["id"]})}
    try:
        response = session.get(url, params=params)
        if response.status_code != 200:
            raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–æ–≤: {response.text}")
        data = response.json()
        ids = [item["id"] for item in data["result"]]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(ids)} –¥–∞—Ç–∞—Å–µ—Ç–æ–≤")
        return ids
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤: {e}")
        return []


# ========================
# 3. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ ID –≥—Ä–∞—Ñ–∏–∫–æ–≤
# ========================
def get_all_chart_ids() -> List[int]:
    print("üîç –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
    url = f"{BASE_URL}/api/v1/chart/"
    params = {"q": json.dumps({"columns": ["id"]})}
    try:
        response = session.get(url, params=params)
        if response.status_code != 200:
            raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {response.text}")
        data = response.json()
        ids = [item["id"] for item in data["result"]]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(ids)} –≥—Ä–∞—Ñ–∏–∫–æ–≤")
        return ids
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
        return []


# ========================
# 4. –ü–æ–ª—É—á–∏—Ç—å ID –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
# ========================
def get_dashboard_id_by_title(title: str) -> int:
    print(f"üîç –ò—â–µ–º –¥–∞—à–±–æ—Ä–¥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {title}")
    url = f"{BASE_URL}/api/v1/dashboard/"
    params = {
        "q": json.dumps(
            {
                "filters": [
                    {"col": "dashboard_title", "opr": "eq", "value": title}
                ]
            }
        )
    }
    try:
        response = session.get(url, params=params)
        if response.status_code != 200:
            raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞: {response.text}")
        data = response.json()
        if data["count"] == 0:
            raise Exception(f"‚ùå –î–∞—à–±–æ—Ä–¥ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{title}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        dashboard_id = data["result"][0]["id"]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –¥–∞—à–±–æ—Ä–¥ '{title}' —Å ID = {dashboard_id}")
        return dashboard_id
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        exit(1)


# ========================
# 5. –≠–∫—Å–ø–æ—Ä—Ç: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
# ========================
def export_database(database_id: int):
    print(f"üóÑÔ∏è –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (ID={database_id})...")
    url = f"{BASE_URL}/api/v1/database/{database_id}/export/"
    try:
        response = session.get(url)
        if response.status_code != 200:
            raise Exception(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ë–î: {response.text}")

        import zipfile
        from io import BytesIO

        zip_file = zipfile.ZipFile(BytesIO(response.content))
        for file_name in zip_file.namelist():
            if file_name.endswith(".yaml"):
                yaml_content = zip_file.read(file_name).decode("utf-8")
                return yaml.safe_load(yaml_content)
        raise Exception("‚ùå YAML —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ë–î: {e}")
        return None


# ========================
# 6. –≠–∫—Å–ø–æ—Ä—Ç: –î–∞—Ç–∞—Å–µ—Ç—ã, –ì—Ä–∞—Ñ–∏–∫–∏, –î–∞—à–±–æ—Ä–¥ –≤ YAML
# ========================
def export_to_yaml():
    print("üì¶ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—ë –≤ YAML...")

    export_data = {
        "metadata": {
            "exported_at": time.strftime("%Y-%m-%d %H:%M:%S"),
            "superset_url": BASE_URL,
            "export_tool": "export_superset_artifacts.py",
        },
        "database": None,
        "datasets": [],
        "charts": [],
        "dashboard": None,
    }

    # === 1. –≠–∫—Å–ø–æ—Ä—Ç –ë–î (—á–µ—Ä–µ–∑ ID –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞) ===
    dataset_ids = get_all_dataset_ids()
    if dataset_ids:
        try:
            ds_url = f"{BASE_URL}/api/v1/dataset/{dataset_ids[0]}"
            ds_response = session.get(ds_url)
            if ds_response.status_code == 200:
                db_id = ds_response.json()["result"]["database"]["id"]
                export_data["database"] = export_database(db_id)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ë–î: {e}")

    # === 2. –≠–∫—Å–ø–æ—Ä—Ç –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ ===
    for ds_id in dataset_ids:
        url = f"{BASE_URL}/api/v1/dataset/{ds_id}"
        try:
            response = session.get(url)
            if response.status_code == 200:
                ds_data = response.json()["result"]
                export_data["datasets"].append(
                    {
                        "id": ds_data["id"],
                        "table_name": ds_data["table_name"],
                        "database_id": ds_data["database"]["id"],
                        "sql": ds_data.get("sql", "N/A"),
                    }
                )
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ {ds_id}: {e}")

    # === 3. –≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∏–∫–æ–≤ ===
    chart_ids = get_all_chart_ids()
    for ch_id in chart_ids:
        url = f"{BASE_URL}/api/v1/chart/{ch_id}"
        try:
            response = session.get(url)
            if response.status_code == 200:
                ch_data = response.json()["result"]
                # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º datasource
                datasource = ch_data.get("datasource")
                datasource_id = datasource["id"] if datasource else None
                datasource_type = datasource["type"] if datasource else None

                export_data["charts"].append(
                    {
                        "id": ch_data["id"],
                        "slice_name": ch_data["slice_name"],
                        "viz_type": ch_data["viz_type"],
                        "datasource_id": datasource_id,
                        "datasource_type": datasource_type,
                        "params": ch_data["params"],
                    }
                )
            else:
                print(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ {ch_id}: {response.status_code}"
                )
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≥—Ä–∞—Ñ–∏–∫–∞ {ch_id}: {e}")

    # === 4. –≠–∫—Å–ø–æ—Ä—Ç –¥–∞—à–±–æ—Ä–¥–∞ ===
    try:
        dashboard_id = get_dashboard_id_by_title(
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–µ–π–±–ª–∞"
        )  # ‚úÖ –¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª
        url = f"{BASE_URL}/api/v1/dashboard/{dashboard_id}"
        response = session.get(url)
        if response.status_code == 200:
            dash_data = response.json()["result"]
            export_data["dashboard"] = {
                "id": dash_data["id"],
                "dashboard_title": dash_data["dashboard_title"],
                "slug": dash_data["slug"],
                "position_json": json.loads(dash_data["position_json"])
                if isinstance(dash_data["position_json"], str)
                else dash_data["position_json"],
            }
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—à–±–æ—Ä–¥: {e}")

    # === 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ YAML ===
    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        yaml.dump(
            export_data,
            f,
            allow_unicode=True,
            default_flow_style=False,
            sort_keys=False,
            indent=2,
        )

    print(f"‚úÖ –í—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {OUTPUT_FILE}")


# ========================
# 7. –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
# ========================
if __name__ == "__main__":
    try:
        login()
        export_to_yaml()
        print(f"\nüéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –§–∞–π–ª: {OUTPUT_FILE}")
        print("üëâ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏: python import_superset_artifacts.py")

    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
